const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const input = process.argv[2];
if (!input) {
  console.error("‚ùå Need ./fragments/ or one.json");
  process.exit(1);
}

let files = [];

const stats = fs.statSync(input);
if (stats.isDirectory()) {
  files = fs.readdirSync(input)
    .filter(f => f.endsWith('.json'))
    .map(f => path.join(input, f));
} else if (stats.isFile()) {
  files = [input];
} else {
  console.error("‚ùå  Failed");
  process.exit(1);
}

if (files.length === 0) {
  console.error("‚ùå  Failed");
  process.exit(1);
}

let chunks = [];
let archiveName = null;
let expectedTotal = null;
let globalHash = null;

for (const filePath of files) {
  const raw = fs.readFileSync(filePath, 'utf8');
  const fragment = JSON.parse(raw);

  if (fragment.type !== 'GITRIP-CHUNK') continue;

  if (!archiveName) archiveName = fragment.name;
  if (!expectedTotal) expectedTotal = fragment.total;
  if (!globalHash) globalHash = fragment.archiveHash;

  chunks[fragment.chunk] = Buffer.from(fragment.data, 'base64');
  console.log(`üì• –ß–∞–Ω–∫ #${fragment.chunk + 1} –∑–∞–≥—Ä—É–∂–µ–Ω`);
}

if (chunks.length !== expectedTotal) {
  console.error("‚ùå –ù–µ –≤—Å–µ —á–∞–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
  process.exit(1);
}

const fullBuffer = Buffer.concat(chunks);
const check = crypto.createHash('sha256').update(fullBuffer).digest('hex');

if (check !== globalHash) {
  console.error("‚ùå –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.");
  process.exit(1);
}

fs.writeFileSync(archiveName, fullBuffer);
console.log(`‚úÖ –ê—Ä—Ö–∏–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${archiveName}`);
