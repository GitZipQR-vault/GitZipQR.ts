const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const input = process.argv[2];
if (!input) {
  console.error("‚ùå –£–∫–∞–∂–∏ –ø–∞–ø–∫—É —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ JSON-—Ñ–∞–π–ª");
  console.log("–ü—Ä–∏–º–µ—Ä: node decode.js ./output/fragments");
  process.exit(1);
}

// –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
const outputDir = process.argv[3] || process.cwd();

let files = [];
try {
  const stats = fs.statSync(input);
  if (stats.isDirectory()) {
    files = fs.readdirSync(input)
      .filter(f => f.endsWith('.json'))
      .map(f => path.join(input, f));
  } else if (stats.isFile()) {
    files = [input];
  }
} catch (e) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${input}`);
  process.exit(1);
}

if (files.length === 0) {
  console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ JSON-—Ñ–∞–π–ª–æ–≤");
  process.exit(1);
}

let chunks = [];
let archiveName = null;
let expectedTotal = null;
let globalHash = null;

for (const filePath of files) {
  try {
    const raw = fs.readFileSync(filePath, 'utf8');
    const fragment = JSON.parse(raw);

    if (fragment.type !== 'GITRIP-CHUNK') continue;

    if (!archiveName) archiveName = fragment.name;
    if (!expectedTotal) expectedTotal = fragment.total;
    if (!globalHash) globalHash = fragment.archiveHash;

    chunks[fragment.chunk] = Buffer.from(fragment.data, 'base64');
    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω —á–∞–Ω–∫ ${fragment.chunk + 1}/${fragment.total}`);
  } catch (e) {
    console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${path.basename(filePath)}: ${e.message}`);
  }
}

if (chunks.length !== expectedTotal) {
  console.error(`\n‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —á–∞–Ω–∫–æ–≤! –ù–∞–π–¥–µ–Ω–æ: ${chunks.filter(Boolean).length}/${expectedTotal}`);
  process.exit(1);
}

const fullBuffer = Buffer.concat(chunks);
const check = crypto.createHash('sha256').update(fullBuffer).digest('hex');

if (check !== globalHash) {
  console.error("\n‚ùå –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.");
  console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: ${globalHash}`);
  console.log(`–ü–æ–ª—É—á–µ–Ω–æ:  ${check}`);
  process.exit(1);
}

const outputPath = path.join(outputDir, archiveName);
fs.writeFileSync(outputPath, fullBuffer);
console.log(`\n‚úÖ –ê—Ä—Ö–∏–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${outputPath}`);